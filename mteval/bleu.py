# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_bleu.ipynb.

# %% auto 0
__all__ = ['measure_bleu', 'measure_record_bleu']

# %% ../nbs/01_bleu.ipynb 6
from sacrebleu.metrics import BLEU
def measure_bleu(hypothesis_lines,reference_lines,targetlang,tok=None):
    """Measuring standard BLEU on set of hypothesis and references"""
    bleu = BLEU(trg_lang=targetlang,tokenize=tok)
    score = bleu.corpus_score(hypothesis_lines,[reference_lines])
    sig = bleu.get_signature().format(short=False)
    score_json = score.format(width=2,score_only=False,signature=sig,is_json=True)
    return score_json

# %% ../nbs/01_bleu.ipynb 7
import csv
import json
import sys
from pathlib import Path
def measure_record_bleu(hypothesis_lines,reference_lines,sourcelang,targetlang,test_set_name,test_date,mtengine,score_pathname,score_fname,domain='',tok=None):
    """Score hypothesis with BLEU score and record it to a specified metrics file"""
    score_json = measure_bleu(hypothesis_lines,reference_lines,targetlang,tok)

    score_dict = json.loads(score_json)
    metric_record = score_dict
    metric_record["date"] = test_date
    metric_record["source_langid"] = sourcelang
    metric_record["target_langid"] = targetlang
    metric_record["test_set"] = test_set_name
    metric_record["engine"] = mtengine
    metric_record["domain"] = domain
    score_path = Path(score_pathname,score_fname)
    with open(score_path,"a",newline="") as score_file:
        field_names = metric_record.keys()
        writer = csv.DictWriter(score_file, fieldnames=field_names)
        if score_file.tell() == 0:
            writer.writeheader()
        writer.writerow(metric_record)
