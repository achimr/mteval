# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_comet.ipynb.

# %% auto 0
__all__ = ['cometscoring']

# %% ../nbs/03_comet.ipynb 7
import comet
from comet import download_model, load_from_checkpoint
from pathlib import Path
import csv
import os

class cometscoring:
    """Class to calculate COMET score (with references)"""
    def __init__(self,model_name="wmt20-comet-da"):
        """Constructor that downloads and loads the COMET model"""
        model_path = download_model(model_name)
        self.model = load_from_checkpoint(model_path)

    def measure_comet(self,source_lines,hypothesis_lines,reference_lines):
        """Function to calculate the comet score"""
        # Construct array necessary to measure COMET
        comet_data = []
        for (src,mt,ref) in zip(source_lines,hypothesis_lines,reference_lines):
            comet_dict = {"src":src,"mt":mt,"ref":ref}
            comet_data.append(comet_dict)
        # Run COMET
        seg_scores, sys_score = self.model.predict(comet_data, batch_size=8, gpus=1)

        return seg_scores, sys_score

    def measure_record_comet(self,source_lines,hypothesis_lines,reference_lines,sourcelang,targetlang,test_set_name,test_date,mtengine,score_pathname,score_fname,domain=''):
        """Function to score hypothesis with COMET score and record score to a specified metrics file"""           
        seg_comet_scores, sys_score = self.measure_comet(source_lines,hypothesis_lines,reference_lines)

        # Write the corpus COMET score with some meta data to CSV file
        metric_record = {}
        metric_record["name"] = "COMET"
        metric_record["score"] = sys_score
        metric_record["version"] = comet.__version__
        metric_record["date"] = test_date
        metric_record["source_langid"] = sourcelang
        metric_record["target_langid"] = targetlang            
        metric_record["test_set"] = test_set_name
        metric_record["engine"] = mtengine
        metric_record["domain"] = domain
        score_path = Path(score_pathname,score_fname)
        with open(score_path,"a",newline="") as score_file:
            field_names = metric_record.keys()
            writer = csv.DictWriter(score_file, fieldnames=field_names)
            if score_file.tell() == 0:
                writer.writeheader()
            writer.writerow(metric_record)   

        # Write segment level COMET scores to plain text file
        output_path = score_pathname+"/"+sourcelang+"_"+targetlang+"/"+test_date+"/"+test_set_name
        os.makedirs(output_path,exist_ok=True)
        seg_score_fname = ""
        if domain:
            seg_score_fname = "comet_"+mtengine+"."+domain+"."+sourcelang+"-"+targetlang
        else:
            seg_score_fname = "comet_"+mtengine+"."+sourcelang+"-"+targetlang
        seg_score_path = Path(output_path,seg_score_fname)
        with open(seg_score_path,"w") as seg_score_fh:
            for seg_comet_score in seg_comet_scores:
                print(seg_comet_score,file=seg_score_fh)

