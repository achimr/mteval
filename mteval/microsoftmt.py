# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_microsoftmt.ipynb.

# %% auto 0
__all__ = ['microsofttranslate']

# %% ../nbs/05_microsoftmt.ipynb 5
import requests, uuid
import os

class microsofttranslate:
    """
    Class to get translations from the Microsoft Translator API
    """
    def __init__(self):
        """
        Constructor of microsofttranslate class

        This will load the credentials for the Microsoft Translator API from the environment
        """
        self._subscription_key = os.getenv('MS_SUBSCRIPTION_KEY')
        self._region = os.getenv('MS_REGION')

    def translate_text(self,source, target, text):
        """
        Function to translate text into the target language

        Parameters:
            source (string): source language identifier as an ISO 639-1 language code. See https://g.co/cloud/translate/v2/translate-reference#supported_languages
            target (string): target language identifier as an ISO 639-1 language code. See https://g.co/cloud/translate/v2/translate-reference#supported_languages
            text (string): Source text to be translated

        Returns:
            hypothesis: Hypothesis translation from Google Translate
        
        """
        # Add your subscription key and endpoint
        subscription_key = self._subscription_key
        endpoint = "https://api.cognitive.microsofttranslator.com"

        # Add your location, also known as region. The default is global.
        # This is required if using a Cognitive Services resource.
        location = self._region

        path = '/translate'
        constructed_url = endpoint + path

        params = {
            'api-version': '3.0',
            'from': source,
            'to': [target]
        }
        constructed_url = endpoint + path

        headers = {
            'Ocp-Apim-Subscription-Key': subscription_key,
            'Ocp-Apim-Subscription-Region': location,
            'Content-type': 'application/json',
            'X-ClientTraceId': str(uuid.uuid4())
        }

        # You can pass more than one object in body.
        body = [{
            'text': text
        }]

        request = requests.post(constructed_url, params=params, headers=headers, json=body)
        response = request.json()

        return response[0]["translations"][0]["text"]
